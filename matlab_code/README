There are 3 main kinds of files:

1) initialization

initialize_from_json takes a single argument
- a filename of a sample

initialize_csv takes three arguments
- a datafile (see animals_data.csv)
- a dataTypes file (see animals_dataTypes.csv)
- an initial state: together, apart, or fromThePrior

2) analyze

analyze takes five arguments:
- a state
- a kernel list composed of one or more of the following: columnPartitionHyperparameter, columnPartitionAssignments, componentHyperparameters, rowPartitionHyperparameters, rowPartitionAssignments
- nSteps, the number of full executions of the kernel list
- c, the columns to which column relevant kernels are applied. this may be a vector or the word 'all'
- r, c, the rows to which row relevant kernels are applied. this may be a vector or the word 'all'

3) exporting samples to json

state_to_json takes four arguments
- a state
- a rowLabelFile, a file containing row labels (see Data/animals_rowLabels.csv)
- a colLabelFile, a file containing column labels (see Data/animals_colLabels.csv)
- a colValueConverter, a file that maps from values to labels (see Data/animals_valueConverter.csv) 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here is an example of each of the calls:
state = initialize_from_json('animals.json');
state = initialize_from_csv('Data/animals_data', 'Data/animals_dataTypes', 'together');
state = analyze(state, {'columnPartitionHyperparameter', 'columnPartitionAssignments', 'componentHyperparameters', 'rowPartitionHyperparameters', 'rowPartitionAssignments'}, 1, 'all', 'all',[],[], []);
state_to_json(state, 'Data/animals_rowLabels', 'Data/animals_columnLabels', 'Data/animals_valueConverter');

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NOTES:
- this has not been tested on missing data (the analyze script has, the others have not)
- this supports binary and numeric data only. an extension to categorical data would be relatively straightforward
- the file state_to_json does some fancy resorting of the data. it could use a second set of eyes to double check it.

